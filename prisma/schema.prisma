// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(uuid())
  name             String
  email            String                @unique
  password         String
  role             String // 'admin' or 'customer'
  verified         Boolean               @default(false)
  contactNo        String?
  address          String?
  profileImg       String?
  reviewAndRatings RoomReviewAndRating[]
  hotelBooks       HotelBook[]
  tourBooks        TourBook[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime?             @updatedAt

  @@map("users")
}

model UserOtp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expireAt  DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("otp")
}

model Location {
  id          String        @id @default(uuid())
  name        String
  image       String
  featured    Boolean       @default(false)
  Hotel       Hotel[]
  TourPackage TourPackage[]

  @@map("location")
}

model Hotel {
  id             String   @id @default(uuid())
  name           String
  average_rating Float?
  // city           String
  address        String
  photos         String[]

  cheapest_price String
  rooms          Room[]
  location       Location  @relation(fields: [locationId], references: [id])
  featured       Boolean   @default(false)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  locationId     String

  @@map("hotel")
}

model Room {
  id        String   @id @default(uuid())
  name      String
  maxPeople String
  price     String
  photos    String[]
  hotelId   String // Assuming hotelId is a UUID

  // Define a relationship to the Hotel model
  hotel                Hotel                 @relation(fields: [hotelId], references: [id])
  RoomNumber           RoomNumber[]         
  roomReviewAndRatings RoomReviewAndRating[]
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")

  @@map("room")
}

model RoomNumber {
  id               String     @id @default(uuid())
  number           String
  unavailableDates DateTime[]

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model TourPackage {
  id            String   @id @default(uuid())
  title         String
  duration      String
  images        String[]
  starting_date String
  departure     String
  price         String
  available     Boolean?
  upcoming      Boolean?  @default(false)
  location      Location @relation(fields: [locationId], references: [id])
  locationId    String
  details       String?

  @@map("tour_package")
}

model RoomReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int // Assume ratings are integers from 1 to 5
  userId String // UUID representing the user who submitted the review
  roomId String // UUID representing the room being reviewed

  // Define a relationship to the User model
  user User @relation(fields: [userId], references: [id])

  // Define a relationship to the Room model
  book      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("room_review_and_ratings")
}

model HotelBook {
  id            String   @id @default(uuid())
  userId        String // UUID representing the user who placed the order
  customer_name String
  phone         String
  address       String
  hotelBooks    Json
  status        String   @default("pending")
  createdAt     DateTime @default(now())

  updatedAt DateTime @updatedAt @map("updated_at")
  // Define a relationship to the User model
  user      User     @relation(fields: [userId], references: [id])

  @@map("hotel_books")
}

model TourBook {
  id            String   @id @default(uuid())
  userId        String // UUID representing the user who placed the order
  tourBooks     Json
  customer_name String
  phone         String
  address       String
  status        String   @default("pending")
  createdAt     DateTime @default(now())

  updatedAt DateTime @updatedAt @map("updated_at")
  // Define a relationship to the User model
  user      User     @relation(fields: [userId], references: [id])

  @@map("tour_books")
}
